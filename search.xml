<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[es6study-setandMap]]></title>
      <url>%2F2017%2F04%2F25%2Fes6study-setandMap%2F</url>
      <content type="text"><![CDATA[Set 没有键名 内容不重复 通过add添加 向Set加入值的时候，不会发生类型转换 Set内部判断两个值是否不同，使用的算法叫做“Same-value equality”，它类似于精确相等运算符（===），主要的区别是NaN等于自身，而精确相等运算符认为NaN不等于自身。 两个对象总是不相等的 属性 Set.prototype.constructor：构造函数，默认就是Set函数。 Set.prototype.size：返回Set实例的成员总数。 操作方法add(value)：添加某个值，返回Set结构本身。 delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。 has(value)：返回一个布尔值，表示该值是否为Set的成员。 clear()：清除所有成员，没有返回值 Array.from方法可以将 Set 结构转为数组。 1234//去重算法function dedupe(array) &#123; return Array.from(new Set(array));&#125; 遍历方法keys()：返回键名的遍历器 values()：返回键值的遍历器 entries()：返回键值对的遍历器 forEach()：使用回调函数遍历每个成员 WeakSet 成员只能是对象 弱引用 无遍历 MapMap 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 将其视为一个键，包括0和-0，布尔值true和字符串true则是两个不同的键。另外，undefined和null也是两个不同的键。虽然NaN不严格相等于自身，但 Map 将其视为同一个键。 属性、操作方法 size属性 set(key, value) get(key) has(key) delete(key) clear()遍历方法 keys()：返回键名的遍历器。 values()：返回键值的遍历器。 entries()：返回所有成员的遍历器。 forEach()：遍历 Map 的所有成员。weakmap 只接受对象作键名 弱引用 无遍历]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[es6study-symbol]]></title>
      <url>%2F2017%2F04%2F25%2Fes6study-symbol%2F</url>
      <content type="text"><![CDATA[SymblolES6 引入了一种新的原始数据类型Symbol，表示独一无二的值 对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。 注意，Symbol函数前不能使用new命令，否则会报错。 Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述 相同参数的Symbol函数的返回值是不相等的。 可以转换为字符串，布尔值，不可以转为数值 注意，Symbol 值作为对象属性名时，不能用点运算符。因为点运算符后面总是字符串。在对象的内部，使用 Symbol 值定义属性时，Symbol 值必须放在方括号之中。 Symbol 作为属性名，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。 Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。 Symbol.for 它接受一个字符串作为参数，然后搜索有没有以该参数作为名称的Symbol值。如果有，就返回这个Symbol值，否则就新建并返回一个以该字符串为名称的Symbol值。 Symbol.keyFor方法返回一个已登记的 Symbol 类型值的key。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[es6study]]></title>
      <url>%2F2017%2F04%2F24%2Fes6study-object%2F</url>
      <content type="text"><![CDATA[对象扩展 注意，属性名表达式与简洁表示法，不能同时使用，会报错。 12345678 // 报错var foo = 'bar';var bar = 'abc';var baz = &#123; [foo] &#125;;// 正确var foo = 'bar';var baz = &#123; [foo]: 'abc'&#125;; 注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]，这一点要特别小心 123456789const keyA = &#123;a: 1&#125;;const keyB = &#123;b: 2&#125;;const myObject = &#123; [keyA]: 'valueA', [keyB]: 'valueB'&#125;;myObject // Object &#123;[object Object]: "valueB"&#125; 上面代码中，[keyA]和[keyB]得到的都是[object Object]，所以[keyB]会把[keyA]覆盖掉，而myObject最后只有一个[object Object]属性。 函数的name属性，返回函数名 如果对象的方法使用了取值函数（getter）和存值函数（setter），则name属性不是在该方法上面，而是该方法的属性的描述对象的get和set属性上面，返回值是方法名前加上get和set。123456789101112const obj = &#123; get foo() &#123;&#125;, set foo(x) &#123;&#125;&#125;;obj.foo.name// TypeError: Cannot read property 'name' of undefinedconst descriptor = Object.getOwnPropertyDescriptor(obj, 'foo');descriptor.get.name // "get foo"descriptor.set.name // "set foo" 有两种特殊情况：bind方法创造的函数，name属性返回bound加上原函数的名字；Function构造函数创造的函数，name属性返回anonymous。 如果对象的方法是一个 Symbol 值，那么name属性返回的是这个 Symbol 值的描述 Object.is它用来比较两个值是否严格相等，与严格比较运算符（===）的行为基本一致。 不同之处只有两个：一是+0不等于-0，二是NaN等于自身。 12345+0 === -0 //trueNaN === NaN // falseObject.is(+0, -0) // falseObject.is(NaN, NaN) // true Object.assign用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。 1234567var target = &#123; a: 1, b: 1 &#125;;var source1 = &#123; b: 2, c: 2 &#125;;var source2 = &#123; c: 3 &#125;;Object.assign(target, source1, source2);target // &#123;a:1, b:2, c:3&#125; undefined和null无法转成对象，所以如果它们作为参数，就会报错。 undefined和null 不在首参数 ，就不会报错 其他类型的值（即数值、字符串和布尔值）不在首参数，也不会报错。但是，除了字符串会以数组形式，拷贝入目标对象，其他值都不会产生效果。 Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。 一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。 注意，Object.assign可以用来处理数组，但是会把数组视为对象 12Object.assign([1, 2, 3], [4, 5])// [4, 5, 3] ES5有三个操作会忽略enumerable为false的属性。 for...in循环：只遍历对象自身的和继承的可枚举的属性 Object.keys()：返回对象自身的所有可枚举的属性的键名 JSON.stringify()：只串行化对象自身的可枚举的属性 ES6新增了一个操作Object.assign()，会忽略enumerable为false的属性 属性的遍历 for…in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性） Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性） Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性） Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性 Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举 规则： 首先遍历所有属性名为数值的属性，按照数字排序。 其次遍历所有属性名为字符串的属性，按照生成时间排序。 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。 _proto__属性（前后各两个下划线），用来读取或设置当前对象的prototype对象 不建议使用 Object.setPrototypeOf()（写操作）、Object.getPrototypeOf()（读操作）、Object.create()（生成操作）]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[html-audio-video-ps]]></title>
      <url>%2F2017%2F04%2F17%2Fhtml-audio-video-ps%2F</url>
      <content type="text"><![CDATA[audio/video 生命周期 loadstart：开始加载音频和视频。 durationchange：音频和视频的duration属性（时长）发生变化时触发，即已经知道媒体文件的长度。如果没有指定音频和视频文件，duration属性等于NaN。如果播放流媒体文件，没有明确的结束时间，duration属性等于Inf（Infinity）。 loadedmetadata：媒体文件的元数据加载完毕时触发，元数据包括duration（时长）、dimensions（大小，视频独有）和文字轨。 loadeddata：媒体文件的第一帧加载完毕时触发，此时整个文件还没有加载完。 progress：浏览器正在下载媒体文件，周期性触发。下载信息保存在元素的buffered属性中。 canplay：浏览器准备好播放，即使只有几帧，readyState属性变为CAN_PLAY。 canplaythrough：浏览器认为可以不缓冲（buffering）播放时触发，即当前下载速度保持不低于播放速度，readyState属性变为CAN_PLAY_THROUGH 支持事件 tabindex属性 如果tabindex = -1，tab键跳过当前元素。 如果tabindex = 0，表示tab键将遍历当前元素。如果一个元素没有设置tabindex，默认值就是0。 如果tabindex &gt; 0，表示tab键优先遍历。值越大，就表示优先级越大]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[resource_front_end_tutorial]]></title>
      <url>%2F2017%2F03%2F30%2Fresource-front-end-tutorial%2F</url>
      <content type="text"><![CDATA[:smiley_cat:These share data are from my usual work and learning，hoping to help you，If you like you can star 更多详情可关注作者:小猫wscat和猫主人windiest,谢谢~ Javascript Article Article Javascript深浅拷贝 Javascript中的apply和call继承 Javascript的jsonp原理 Javascript监听触摸事件 Javascript中的var self = this Javascript面向对象编程 Javascript滑屏切换场景 Javascript获取经纬度，关于调用百度API的问题 妙用Javascript运算符 深入理解Javascript函数编程 Javascript的setTimeout详细用例 sessionstorage，localstorage和cookie JS日期对比 JSONP参考文章 Javascript的createElement Javascript的createDocumentFragment sessionStorage和localStorage 像素帧动画 Reference Reference 收集最全前端学习资料 最全前端教程-猫的回忆录 JavaScript中的this陷阱的最全收集–没有之一 JS函数式编程指南 JavaScript Promise迷你书（中文版） 阮一峰 Javascript 前端 TOP 100 小白的零基础JavaScript全栈教程 UI Reference Reference WeUI Bootstrap MUI-最接近原生APP体验的高性能前端框架 Amaze UI中国首个开源HTML5跨屏前端框架 Frozen UI Foundation SUI ZUI 淘宝HTML5前端框架 KISSY - 阿里前端JavaScript库 网易Nej - Nice Easy Javascript Kendo UI MVVM Demo Smart UI 雅虎UI - CSS UI CSS Article Article CSS Flex布局 移动前端开发CSS3 响应式布局 媒体查询 CSS图片响应式布局 lessDemo的less文件 Reference Reference CSS 语法参考 CSS3动画手册 腾讯css3动画制作工具 animate.css Animated Books with CSS 3D Transforms Browserhacks HTML Article Article HTML5有哪些让你惊艳的demo|Wallpaperbetter| Angular Article Angular文档 Angular源码解读publishExternalAPI函数 Angular源码解读setupModuleLoader函数 Angular的ng-style用法 Angular判断在那个浏览器下打开的服务 Angular文字折叠展开组件的原理分析 Angular服务Request异步请求的详细分析 Angular自定义service服务详解 Angular自定义判断上一页是否存在的服务 Angular操作cookies方法 Angular打印错误的minErr函数 Angular的fromJson与toJson方法 Angular用ng-repeat生成表单并绑定ng-click时的一个细节 Angular的run方法巧妙运用 Angular处理Html转义问题 ng-repeat绑定事件和嵌套 Angular的post请求后台接受不了数据的解决方法 ionic总结 ui-route和ng-route ng-options&amp;&amp;ng-switch directive组件作用域 表单认证 $broadcast,$emit and $on 自定义过滤器 自定义手势指令ng-touch ng-animate 单页面应用的技术点 Guess you like AppDemo Angular商城Demo Angular的Cnode社区 AngularStovepipe Angular的新闻客户端 Angular商城Demo Angular的Cnode社区 Angular内联编辑器 Angular即时搜索 Angular导航菜单 Angular订单表单 Angular切换网格 Angular新闻＋WEUI DEMO 源码 Controller 控制器 Angular控制器demo SPA DEMO 单页面应用 Angular+Weui单页面应用DEMO-每日笑话 Service 服务 Angular自定义服务的常用方法 Angular部分服务demo Angular自定义Canvas画图服务 Angular自定义http服务 面向对象封装 Directive 组件与指令 Angular自定义手势指令 Angular自定义轮播图组件 Angular自定义下拉刷新组件1 Angular自定义下拉刷新组件2 Router 路由 Angular路由嵌套 Angular路由单页多个ui-view Filter 过滤器 Angular自带过滤器 Angular自定义关键词检索过滤器 Animate 动画 Angular ng-animate动画1 Angular ng-animate动画2 Other 其他 Angular中使用iframe Angular三级联动(1) Angular中使用ng-switch 百度定位DEMO Angular三级联动(2) Angular事件监听 jQuery模拟ng-repeat lessDemo Angular自定义cookie服务和ngCookie的使用 图灵机器人 Angular利用angular.module()实现模块化 Angular的form表单验证 Angular的ng-repeat嵌套 Angular利用angular.module()实现模块化2 PHP PHP PHP CURL请求的小细节 Reference Reference 最流行的PHP 代码规范 最流行的PHP 代码规范 Angular.js的一些学习资源 Angularjs中文社区 一些扩展Angular UI组件 Angular UI AngularJS在线教程 Angular学习笔记 React React Reference React教程 菜鸟教程 React Router 使用教程 React开发中文手册-极客学院 React教程-汇智网 React.js快速开始 Reactjs 2016最佳实践 React 入门教程 汇智网 React教程 轻松入门React和Webpack React中文索引 Redux 中文文档 React Router官方文档中文翻译 React入门教程 React介绍及实践教程 React.js 官方网址 React.js 官方文档 React.js material UI React.js TouchstoneJS UI React.js amazeui UI React 入门实例教程 - 阮一峰 React Native 中文版 Webpack 和 React 小书 - gitbook Vue Vue AppDemo Demo NewsDemo vue计算属性 vue生命周期 Article Vue文档 Vue-cli脚手架 Vue组件 vue自定义指令 Vue过渡动画 Vue指令 Vue api文档 Vue执行ajax请求 vue实现类似angular服务的方法 Vue源码参考文档 Router 路由 路由demo 路由demo2 Directive 指令 指令demo 自定义指令demo 滑动手势demo Filter 过滤器 过滤器demo 过滤器实现分页demo 过滤器读写数据 Transition 过渡 过渡demo 过渡demo2 Form 表单 获取表单值 Computed 计算 计算属性 Component 组件 组件demo Reference Reference Reference Vue官网 Vue论坛 Awesome-vue Node Node Article node技巧 NodeJs静态服务器 Reference Reference Node.js 包教不包会 七天学会NodeJS 从零开始nodejs系列文章 Node入门 Node初学者入门，一本全面的NodeJS教程 Gulp Gulp Article Gulp Demo Gulp Reference Gulp官网 Gulp中文网 Gulp资料收集 Gulp：任务自动管理工具 - ruanyifeng Gulp插件 Gulp不完全入门教程 Gulp 入门指南 其他 Other Article 关于Pornographic website的一些前端分析 微信公众号开发 Atom技巧总结 Mac小技巧 CSDN页面内JS跳转脚本 CSDN博客隐藏配置 百度设置小度机器人出现 前端冷知识，妙用浏览器地址栏 Vim笔记 Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境） IE8及以下按钮超链接无法跳转的问题 分享功能 Share Reference 百度分享(PC) JiaThis(PC) 社会化分享组件(Mobile) ShareSDK轻松实现社会化功能(Mobile) 友盟分享(Mobile) 在线演示 Reference Reference js 在线编辑 - runjs js 在线编辑 - jsbin js 在线编辑 - codepen js 在线编辑 - jsfiddle java 在线编辑 - runjs js 在线编辑 - hcharts js 在线编辑 - jsdm sql 在线编辑 - sqlfiddle mozilla 在线编辑器 富文本编辑器 Reference Reference 百度ueditor ckeditor tinymce kindeditor wysiwyg BachEditor simditor summernote Squire wangEditor Chrome Reference Reference Chrome - 基础 Chrome - 进阶 Chrome - 性能 Chrome - 性能进阶 Chrome - 移动 Chrome - 使用技巧 Chrome - Console控制台不完全指南 chrome开发工具快捷键 Chrome 开发工具 Workspace 使用 Chrome神器Vimium快捷键学习记录 Sass调试-w3cplus 如何更专业的使用Chrome开发者工具-w3cplus Chrome调试canvas 神器——Chrome开发者工具(一) 奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍 Chrome 开发者工具的 15 个小技巧 Chrome开发者工具不完全指南 Chrome 开发者工具使用技巧 性能优化 Reference Reference Javascript高性能动画与页面渲染 移动H5前端性能优化指南 给网页设计师和前端开发者看的前端性能优化 张鑫旭——前端性能 web前端性能优化进阶路 Hey——前端性能 YSLOW中文介绍 Yahoo!团队实践分享：网站性能 加载，不只是少一点点 由12306谈谈网站前端性能和后端性能优化 【高性能前端1】高性能HTML 【高性能前端2】高性能CSS 前端工程与性能优化（上）：静态资源版本更新与缓存 前端工程与性能优化（下）：静态资源管理与模板框架 HTTPS连接的前几毫秒发生了什么 Yslow 阿里无线前端性能优化指南(Pt.1 加载期优化) 毫秒必争，前端网页性能最佳实践 CDN Reference Reference Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务 Bootstrap中文网开源项目免费 CDN 服务 新浪CDN 百度静态资源公共库 开放静态文件 CDN - 七牛 CDN加速 - jq22 微软CDN Angular CDN 360网站卫士常用前端公共库CDN服务 Git Article Article Git操作 Git CSDN Blog Reference Reference Git-scm Git-for-windows 廖雪峰-Git教程 Gogithub Git常规命令练习 Git的资料整理 我所记录的git命令（非常实用） GitHub 漫游指南 GitHub秘籍 动画方式练习git Sass&amp;Less Article Article Less教程 Reference Reference Sass Sass中文文档 Less Markdown Reference Reference Markdown 语法说明 (简体中文版) Markdown入门参考 Mdeditor(一款国内的在线markdown编辑器) Stackedit(国外的在线markdown编辑器，功能强大，同步云盘) Mditor一款轻量级的markdown编辑器 lepture-editor Markdown-editor 前端文档 Reference Reference 前端知识结构 Web前端开发大系概览 免费的编程中文书籍索 前端书籍 前端免费书籍大全 重新介绍JavaScript（JS教程） Gitbook Front-End-Develop-Guide 前端开发指南 前端开发笔记本 大前端工具集 前端开发者手册 结合个人经历总结的前端入门方法 2016最新前端学习计划 前端规范 Reference Reference 通过分析github代码库总结出来的工程师代码书写习惯 HTML&amp;CSS编码规范 by @mdo 前端编码规范之js - by yuwenhui 前端编码规范之js - by 李靖 Airbnb JavaScript 编码规范（简体中文版） AMD与CMD规范的区别 AMD与CMD规范的区别 KISSY 源码规范 前端代码规范及最佳实践 百度前端规范 JavaScript风格指南/编码规范（Airbnb公司版） 网易前端开发规范 前端规范资源列表 Web 前端开发规范文档 前端面试 Reference Reference 2016校招内推 – 阿里巴巴前端 – 四面面试经历 那几个月在找工作（百度，网易游戏，华为） 前端开发面试题 Front-end-Interview-questions 5个经典的前端面试问题 Front-end-Developer-Interview-Questions BAT及各大互联网公司2014前端笔试面试题：JavaScript篇 前端开发面试题大收集 收集的前端面试题和答案 前端开发面试题 前端面试大全 关于前端面试 前端网站 Reference Reference 掘金 百度FEX 阿里UED 菜鸟教程 QDFuns 幕课网 Codepen Sentsin CTOLib CTOLib/Node JS练习 Reference Reference Codewars Javascript-puzzlers Freecodecamp中文版 ES6katas Now Coder牛客网 Leetcode Nodeschool Hackerrank 算法 Reference Reference 数据结构与算法 JavaScript 描述. 章节练习 常见排序算法（JS版） 经典排序 常见排序算法-js版本 ES Reference Reference Exploring-ES6翻译 阮一峰 ES6 ECMA-262，第 5 版 ES5 如需参考过往资料可翻看commit或查看下文： 如何评价 GitHub 中国区粉丝数前 100 名的用户？ 为什么有人GitHub排行很低，不仅不向排行高的学习，反而去黑排行高的？]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[study]]></title>
      <url>%2F2017%2F03%2F29%2Fstudy%2F</url>
      <content type="text"><![CDATA[study admin dashboardproject addressD:\test\blur-admin first run123$ npm install$ bower install$ gulp serve publish1$ gulp serve:dist]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[artticle title]]></title>
      <url>%2F2017%2F03%2F23%2Fartticle-title%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F23%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Deploy to github1$ hexo d -g MarkDown 语法说明]]></content>
    </entry>

    
  
  
</search>
